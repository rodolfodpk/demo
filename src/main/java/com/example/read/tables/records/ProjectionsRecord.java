/*
 * This file is generated by jOOQ.
 */
package com.example.read.tables.records;


import com.example.read.tables.Projections;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectionsRecord extends UpdatableRecordImpl<ProjectionsRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.projections.ar_name</code>.
     */
    public ProjectionsRecord setArName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.projections.ar_name</code>.
     */
    public String getArName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.projections.stream_name</code>.
     */
    public ProjectionsRecord setStreamName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.projections.stream_name</code>.
     */
    public String getStreamName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.projections.last_uow</code>.
     */
    public ProjectionsRecord setLastUow(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.projections.last_uow</code>.
     */
    public Integer getLastUow() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Projections.PROJECTIONS.AR_NAME;
    }

    @Override
    public Field<String> field2() {
        return Projections.PROJECTIONS.STREAM_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Projections.PROJECTIONS.LAST_UOW;
    }

    @Override
    public String component1() {
        return getArName();
    }

    @Override
    public String component2() {
        return getStreamName();
    }

    @Override
    public Integer component3() {
        return getLastUow();
    }

    @Override
    public String value1() {
        return getArName();
    }

    @Override
    public String value2() {
        return getStreamName();
    }

    @Override
    public Integer value3() {
        return getLastUow();
    }

    @Override
    public ProjectionsRecord value1(String value) {
        setArName(value);
        return this;
    }

    @Override
    public ProjectionsRecord value2(String value) {
        setStreamName(value);
        return this;
    }

    @Override
    public ProjectionsRecord value3(Integer value) {
        setLastUow(value);
        return this;
    }

    @Override
    public ProjectionsRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectionsRecord
     */
    public ProjectionsRecord() {
        super(Projections.PROJECTIONS);
    }

    /**
     * Create a detached, initialised ProjectionsRecord
     */
    public ProjectionsRecord(String arName, String streamName, Integer lastUow) {
        super(Projections.PROJECTIONS);

        setArName(arName);
        setStreamName(streamName);
        setLastUow(lastUow);
    }
}
